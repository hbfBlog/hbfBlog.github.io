<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DevinHe Blog]]></title>
  <link href="http://hbfBlog.github.io/atom.xml" rel="self"/>
  <link href="http://hbfBlog.github.io/"/>
  <updated>2014-04-14T07:28:47+08:00</updated>
  <id>http://hbfBlog.github.io/</id>
  <author>
    <name><![CDATA[DevinHe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ROR教程知识积累]]></title>
    <link href="http://hbfBlog.github.io/blog/2014/04/14/ruby-on-rails-tutorial-knowledges/"/>
    <updated>2014-04-14T07:26:03+08:00</updated>
    <id>http://hbfBlog.github.io/blog/2014/04/14/ruby-on-rails-tutorial-knowledges</id>
    <content type="html"><![CDATA[<p>记录在ROR教程学习过程中，遇到的一些问题以及难理解的知识点。</p>

<!--more-->


<h4><strong><em>使用AJAX技术</em></strong></h4>

<p>描述对<code>button_to</code>添加AJAX的基本步骤。<br/>
1. 为button添加remote参数：</p>

<pre><code>`&lt;%= button_to 'Add to Cart', line_items_path(product_id: product), remote: true %&gt;`
</code></pre>

<ol>
<li>在相应的action动作中添加脚本响应：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  respond_to do |format|
</span><span class='line'>    format.js
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p>3.上一步的设置，Rails将会自动寻找一个action.js.erb文件，此步需要新建一个该文件（与相应的view文件在同一个目录中）。</p>

<pre><code>    例如创建文件app/views/line_items/create.js.erb  
    使用JQuery编写该js脚本文件：`$('#cart').html("&lt;%= escape_javascript render(@cart) %&gt;");`  
</code></pre>

<h4><strong><em>使应用变得国际化</em></strong></h4>

<ol>
<li>新建文件app/config/initializers/i18n.rb,设定语言种类以及默认语言。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>I18n.default_locale = :en
</span><span class='line'>LANGUAGES = [
</span><span class='line'>    ['English', 'en'],  
</span><span class='line'>    ['简体中文', 'zh-CN']
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<ol>
<li>创建&#8217;/en/controller/action&#8217;形式路由</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scope '(:locale)' do
</span><span class='line'>    root 'store#index', as: 'store', via: :all
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在<code>application_controller.rb</code>中设置全局的语言选择</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>before_action :set_i18n_locale_from_params  
</span><span class='line'>...
</span><span class='line'>protected
</span><span class='line'>  def set_i18n_locale_from_params
</span><span class='line'>    if params[:locale]
</span><span class='line'>     if I18n.available_locales.map(&:to_s).include?(params[:locale])
</span><span class='line'>        I18n.locale = params[:locale]
</span><span class='line'>     else
</span><span class='line'>        flash.now[:notice] = "#{params[:locale]} translation not available"
</span><span class='line'>        logger.error flash.now[:notice]
</span><span class='line'>     end
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def default_url_options
</span><span class='line'>      { locale: I18n.locale }
</span><span class='line'>    end
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<ol>
<li>设置<code>app/views/layouts/application.html.erb</code><br/>
<code>&lt;li&gt;&lt;a href=""&gt;&lt;%= t('.news') %&gt;&lt;/a&gt;&lt;/li&gt;</code></li>
<li>编写相应的国际化输出<br/>
编辑app/config/locales/en.yml</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>en:  
</span><span class='line'>  layouts:
</span><span class='line'>    application:
</span><span class='line'>       news: "News"</span></code></pre></td></tr></table></div></figure>


<p>新建并编辑app/config/locales/zh-CN.yml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zh-CN:
</span><span class='line'>  layouts:
</span><span class='line'>    application:
</span><span class='line'>       news: "新闻"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>添加语言选择器<br/>
在application.html.erb中添加下拉按：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id="banner"&gt;  
</span><span class='line'>      &lt;%= form_tag store_path, class: 'locale' do %&gt;  
</span><span class='line'>           &lt;%= select_tag 'set_locale', options_for_select(LANGUAGES, I18n.locale.to_s),onchange: 'this.form.submit()' %&gt;  
</span><span class='line'>           &lt;%= submit_tag 'submit' %&gt;  
</span><span class='line'>           &lt;%= javascript_tag "$('.locale input').hide()" %&gt;  
</span><span class='line'>      &lt;% end %&gt;  
</span><span class='line'>&lt;/div&gt;  </span></code></pre></td></tr></table></div></figure>


<p>在控制器中处理参数:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def index  
</span><span class='line'>      if params[:set_locale]  
</span><span class='line'>        redirect_to store_url(locale: params[:set_locale])  
</span><span class='line'>      else  
</span><span class='line'>        @products = Product.order(:title)  
</span><span class='line'>      end  
</span><span class='line'>end  </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails基础知识]]></title>
    <link href="http://hbfBlog.github.io/blog/2014/04/10/rails-basement/"/>
    <updated>2014-04-10T06:43:44+08:00</updated>
    <id>http://hbfBlog.github.io/blog/2014/04/10/rails-basement</id>
    <content type="html"><![CDATA[<p>积累Rails的小知识。<!--more--></p>

<h4><strong><em><code>resources :posts</code>创建了哪些路由？</em></strong></h4>

<ul>
<li>创建的路由可以通过<code>rake routes</code>来查看
        posts GET    /posts(.:format)          posts#index
              POST   /posts(.:format)          posts#create
     new_post GET    /posts/new(.:format)      posts#new
    edit_post GET    /posts/:id/edit(.:format) posts#edit
         post GET    /posts/:id(.:format)      posts#show
              PATCH  /posts/:id(.:format)      posts#update
              PUT    /posts/:id(.:format)      posts#update
              DELETE /posts/:id(.:format)      posts#destroy
  <em>总结起来，基本上只有4个形式，/posts、/posts/new、/posts/:id、/posts/:id/edit，动词有五种get、post、put、patch、delete。</em></li>
</ul>


<h4><strong><em>什么是RESTful？</em></strong></h4>

<ul>
<li>REST=&ldquo;Representation State Transfer&rdquo;,表现层状态转化</li>
<li>每一个URI代表一种资源</li>
<li>客户端和服务器之间，传递这种资源的某种表现层。</li>
<li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现&#8221;表现层状态转化&#8221;<br/>
简单的可以认为，HTTP是无状态的，REST风格使得通过URL可以传递状态，去除了额外的参数。<br/>
Tips：</li>
<li>URI中不要包含动词：/posts/show/1，应该改为/posts/1</li>
<li>URI中不要加版本号：/app/1.0/foo，可以在HTTP请求头信息的Accept字段中进行区分Accept: vnd.example-com.foo+json; version=1.0</li>
</ul>


<h4><strong><em>User.find(10) 和 User.find_by_id(10)的区别</em></strong></h4>

<ul>
<li><code>User.find(10)</code>相当于： <code>select users.* from "users" where "user"."id" = ? limit 1 [["id", 1]]</code>;失败后返回ActiveRecord::RecordNotFound异常。</li>
<li><code>User.find_by_id(10)</code>相当于: <code>select users.* form "users" where "user"."id" = 1 limit 1</code>;失败返回nil。</li>
</ul>


<h4><strong><em>在控制台中执行<code>user = User.first; user.name = 'wangwei'</code>后, 如何查看数据库中的user信息?</em></strong></h4>

<ul>
<li>使用user.reload,对对象进行重载。</li>
</ul>


<h4><strong><em>rake的作用</em></strong></h4>

<ul>
<li><code>rake routes</code>： 列出当前应用的所有定义的路由。</li>
<li><code>rake test</code>： 运行测试用例。</li>
<li><code>rake assets：precompile</code>: 对静态资源进行预编译。</li>
<li><code>rake stats</code>：查看应用中代码统计的数据。</li>
<li><code>rake secret</code>：生成伪随机key。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby知识积累]]></title>
    <link href="http://hbfBlog.github.io/blog/2014/04/09/design-method-in-ruby/"/>
    <updated>2014-04-09T08:32:02+08:00</updated>
    <id>http://hbfBlog.github.io/blog/2014/04/09/design-method-in-ruby</id>
    <content type="html"><![CDATA[<p>积累自己在学习Ruby过程中遇到的疑惑。<!--more--></p>

<h4><strong><em>Ruby的优缺点？</em></strong></h4>

<ul>
<li><p>优点：</p>

<ul>
<li>解释型执行，方便快捷</li>
<li>语法简单、优雅</li>
<li>完全面向对象</li>
<li>内置正则式引擎，适合文本处理</li>
<li>自动垃圾收集机制</li>
<li>跨平台和高度可移植性</li>
<li>有优雅、完善的异常处理机制</li>
<li>拥有很多高级特性:例如操作符重载、Mix-ins、特殊方法等等</li>
</ul>
</li>
<li><p>缺点：</p>

<ul>
<li>解释型语言，所以速度较慢</li>
<li>静态检查比较少</li>
</ul>
</li>
</ul>


<h4><strong><em>require, load,autoload,include的区别是什么?</em></strong></h4>

<ul>
<li>require.load用于文件，如*.rb；include用于包含一个文件中的模块。</li>
<li>require一般情况下用于加载库文件，而load则用于加载配置文件。</li>
<li>require只加载一次，load可加载多次</li>
<li>autoload(name,file_name)在模块名称name第一次被访问的时候，加载file_name。</li>
</ul>


<h4><strong><em>&ldquo;中国 2014&rdquo;.size和&#8221;中国 2014&#8221;.bytesize有什么区别？</em></strong></h4>

<ul>
<li>输出结果分别为：size=7，bytesize=9；</li>
<li>String#size,String#length返回的是字符个数；</li>
<li>String#bytesize返回的字节个数。</li>
</ul>


<h4><strong><em>string 和 symbol有什么区别？</em></strong></h4>

<ul>
<li>string定义后可以改变,即使内容相同的string，其object_id也不同；</li>
<li>symbol定义后不可以进行改变，同一个符号的object_id是唯一的。

<blockquote><p>镐头书中这样描述：
symbol are simply constant names that you don&rsquo;t have to predeclare and that are guaranteed to be unique.There is no need to assign some kind of value to a symbol&mdash;Ruby takes care of that for you.</p></blockquote></li>
</ul>


<h4><strong><em>Ruyb中有哪些设计模式？</em></strong></h4>

<ul>
<li>Singleton(单件)模式</li>
<li>以库的形式实现了此模式，使用singleton库的方法是先<code>require 'singleton'</code>然后在类中<code>include Singleton</code>。</li>
<li>Proxy(代理)模式</li>
<li>tempfile库的实现使用了此模式，使得该库在不用指定文件名的情况下就可以生成临时的工作文件。</li>
<li>可以通过Ruby中delegate库来实现此模式，tempfile库也是使用此库来实现的。</li>
<li>method_missing方法的使用，也是代理模式的机制的一个体现。</li>
<li>Visitor(访问者)模式</li>
<li>Ruby中使用此模式来实现使用块进行循环的抽象化。</li>
<li>Prototype（原型）模型

<blockquote><p>Prototype模式：明确一个实例作为要生成对象的种类模型，通过复制该实例来生成新的对象。</p></blockquote></li>
<li>Ruby虽然是类模式的语言，也拥有支持原型模式编程的功能。</li>
<li>复制对象的clone方法</li>
<li>给个别对象增加方法的特异方法功能</li>
<li>给个别对象增加一组功能的extend方法</li>
<li>Template Method(模板方法)模式

<blockquote><p>Template Method模式:在父类的一个方法中定义算法的框架，其中几个步骤的具体内容则留给子类来实现。</p></blockquote></li>
<li>Ruby中最大限度的使用该模式的库为Enumerable模块和Comparable模块了。</li>
<li>Observable(观察者)模式</li>
<li>观察者模式是一种避免高度依赖性的手段。</li>
<li>Ruby为实现此模式提供了observer的库。</li>
<li>Strategy(策略)模式

<blockquote><p>策略模式:定义算法的集合，将各算法封装，使得他们能够交换。利用Strategy模式，算法和利用这些算法的客户程序可以分别独立进行修改而不互相影响。</p></blockquote></li>
<li>Ruby库中cgi/session库使用了此模式。</li>
</ul>


<h4><strong><em>给定一个时间点，希望得到其他时间点</em></strong></h4>

<p>使用date库方法即可，如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'date'
</span><span class='line'>(Date.new(1776, 7, 2)..Date.new(1776, 7, 4)).each { |x| puts x } </span></code></pre></td></tr></table></div></figure>


<h4><strong><em>求一个数是否为素数</em></strong></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def is_prime?
</span><span class='line'>  return false if self &lt;= 1
</span><span class='line'>  2.upto(Math.sqrt(self).to_i) do |x|
</span><span class='line'>    return false if self % x == 0
</span><span class='line'>  end
</span><span class='line'>  true
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>或者使用Prime类方法prime?(n)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何配置Octopress]]></title>
    <link href="http://hbfBlog.github.io/blog/2014/04/08/how-to-set-yourself-octopress/"/>
    <updated>2014-04-08T21:41:06+08:00</updated>
    <id>http://hbfBlog.github.io/blog/2014/04/08/how-to-set-yourself-octopress</id>
    <content type="html"><![CDATA[<p>记录一些对框架的基本配置以及侧边栏小功能的添加过程和遇到的问题。</p>

<!--more-->


<h4>执行<code>rake install</code>命令后生成的文件夹有：</h4>

<ol>
<li>source：对.themes\classic\source目录的一份拷贝并自动创建_posts目录。</li>
<li>sass：对.themes\class\sass的一份拷贝。</li>
<li>public：用于存储<code>rake generate</code>命令对source目录下的资源文件进行编译后的内容，并在执行<code>rake deploy</code>命令后将其内容推送到服务器上。此文件夹内容不需要进行手动修改。</li>
</ol>


<h4>对&#8221;_config.yml&#8221;的基本设置：</h4>

<pre><code>    url: http://hbfBlog.github.io     #博客网址
  title: DevinHe Blog           #博客标题
  subtitle: 花不可以无蝶，山不可以无泉，人不可以无癖。       #博客副标题
  author: DevinHe                       #博客的作者
  simple_search: https://www.google.com/search        #搜索引擎
  description: 个人学习网站                   #网站的描述
</code></pre>

<h4>对博文的基本设置：</h4>

<pre><code>---
layout: post
title: "how to set yourself octopress"      #文章的标题
date: 2014-04-08 21:41:06 +0800     #文章的发布时间
comments: true                #是否允许评论
categories: octopress           #文章类别
keywords: octopress setting         #文章关键字
tags: octopress               #文章标签
description: "config.yml, index, nav"
---
</code></pre>

<h4>对首页的设置：</h4>

<pre><code>---
layout: default
description: "何白帆的个人博客" 
keywords: Ruby,Rails,Web
---
</code></pre>

<h4>导航栏的设置（source_includes\custom\navigation.html）：</h4>

<p>  首先运行命令<code>rake new_page['about']</code>创建一个关于页面。
  修改导航页面：</p>

<pre><code>&lt;ul class="main-navigation"&gt; 
  &lt;li&gt;&lt;a href="http://hbfBlog.github.io/"&gt;首页&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="/blog/archives"&gt;归档&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="http://hbfBlog.github.io/about"&gt;关于&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
</code></pre>

<h4>添加侧边栏文章分类</h4>

<ol>
<li>在plugins目录中创建category_list_tag.rb文件，内容如下：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module Jekyll   
</span><span class='line'>      class CategoryListTag &lt; Liquid::Tag   
</span><span class='line'>        def render(context)   
</span><span class='line'>          html = ""   
</span><span class='line'>          categories = context.registers[:site].categories.keys   
</span><span class='line'>          categories.sort.each do |category|   
</span><span class='line'>            posts_in_category = context.registers[:site].categories[category].size   
</span><span class='line'>            category_dir = context.registers[:site].config['category_dir']   
</span><span class='line'>            category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)   
</span><span class='line'>            html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://hbfBlog.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"   
</span><span class='line'>          end   
</span><span class='line'>          html   
</span><span class='line'>        end   
</span><span class='line'>      end   
</span><span class='line'>    end  
</span><span class='line'>    Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)  </span></code></pre></td></tr></table></div></figure>


<p>
2. 添加source/_includes/asides/category_list.html文件，内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt; 
</span><span class='line'>  &lt;h1&gt;Categories&lt;/h1&gt; 
</span><span class='line'>  &lt;ul id="categories"&gt; 
</span><span class='line'>    <li class='category'><a href='http://hbfBlog.github.io/blog/categories/agile/'>Agile (1)</a></li>
<li class='category'><a href='http://hbfBlog.github.io/blog/categories/development/'>Development (1)</a></li>
<li class='category'><a href='http://hbfBlog.github.io/blog/categories/rails4/'>Rails4 (1)</a></li>
<li class='category'><a href='http://hbfBlog.github.io/blog/categories/web/'>Web (1)</a></li>
<li class='category'><a href='http://hbfBlog.github.io/blog/categories/markdown/'>markdown (1)</a></li>
<li class='category'><a href='http://hbfBlog.github.io/blog/categories/octopress/'>octopress (2)</a></li>
<li class='category'><a href='http://hbfBlog.github.io/blog/categories/rails/'>rails (1)</a></li>
<li class='category'><a href='http://hbfBlog.github.io/blog/categories/ruby/'>ruby (1)</a></li>
<li class='category'><a href='http://hbfBlog.github.io/blog/categories/with/'>with (1)</a></li>
 
</span><span class='line'>  &lt;/ul&gt; 
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<ol>
<li>修改_config.yml文件<br/>
<code>default_asides: [asides/category_list.html, asides/recent_posts.html]</code></li>
</ol>


<h4>添加评论功能（使用Disqus第三方评论系统）：</h4>

<ol>
<li>首先注册一个<a href="http://www.disqus.com/">Disqus</a>账号。</li>
<li>修改<code>_config.yml</code>文件
     # Disqus Comments
     disqus_short_name: xxxx   # xxxx为添加站点信息时的Site Shortname，即unique Disqus URL。
     disqus_show_comment_count: true</li>
</ol>


<h4>使文章以摘要形式展示</h4>

<pre><code>在显示内容后面添加&lt;!—more—&gt;。
</code></pre>

<h4>添加tags：</h4>

<ol>
<li><a href="https://github.com/robbyedwards/octopress-tag-pages">octopress-tag-pages</a>

<ul>
<li>复制tag_generator.rb到/plugins目录;</li>
<li>复制tag_index.html到/source/_layouts目录;</li>
<li>复制tag_feed.xml到source/_includes/custom目录.</li>
</ul>
</li>
<li><a href="https://github.com/robbyedwards/octopress-tag-cloud">octopress-tag-cloud</a>

<ul>
<li>复制tag_cloud.rb到/plugins目录。</li>
</ul>
</li>
<li><p>bug:当对所有标签只出现一次的情况编译时，会报错。<br/>
 <a href="https://github.com/robbyedwards/octopress-tag-cloud/issues/1">Ref</a><br/>
 错误信息：Liquid Exception: comparison of Array with Array failed in page<br/>
 修改plugins/tag_cloud.rb文件中如下内容：
       # get the minimum, and maximum tag count
       min, max = count.map(&amp;:last).minmax</p>

<pre><code>   # map: [[tag name, tag count]] -&gt; [[tag name, tag weight]]
   weighted = count.map do |name, count|
     # logarithmic distribution
     if min == max
       weight = 1
     else
       weight = (Math.log(count) - Math.log(min))/(Math.log(max) - Math.log(min))
     end
     [name, weight]
   end 
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown格式（入门级别）]]></title>
    <link href="http://hbfBlog.github.io/blog/2014/04/08/markdown-learning/"/>
    <updated>2014-04-08T18:08:09+08:00</updated>
    <id>http://hbfBlog.github.io/blog/2014/04/08/markdown-learning</id>
    <content type="html"><![CDATA[<p>简单介绍一些markdown的书写格式，为写博客做准备。</p>

<!--more-->


<ol>
<li><strong><em>标题</em></strong><br/>
 加#，‘#’的个数n代表了hn。如5级标题：<br/>
 #####五级标题
 #####五级标题</li>
<li><strong><em>断行</em></strong><br/>
 行尾加两个空格<br/>
 不加空格前：  第一行
第二行<br/>
 加上空格之后： 第一行<br/>
第二行</li>
<li><strong><em>列表</em></strong><br/>
 *列表 ,+是UL，数字是OL,在符号与内容之间须保持有空格存在。</li>
<li><strong><em>链接</em></strong><br/>
 网址：<code>[百度](www.baidu.com)</code><br/>
 图片：<code>![img](url)</code></li>
<li><strong><em>引用</em></strong><br/>
 单个引用(>hello) 或 嵌套引用(>>hello)</li>
<li><strong><em>代码</em></strong><br/>
 单行：（`）使用该符号将代码括起。<br/>
 多行：(&#8220;`)使用该符号将代码括起。</li>
<li><strong><em>水平线</em></strong><br/>
 使用至少3个（-/*/_）符号表示</li>
<li><strong><em>粗体和斜体</em></strong><br/>
 使用（*）或（_）号，一个表示斜体，两个表示粗体，3个表示粗斜体。</li>
<li><strong><em>markdown在线编辑</em></strong><br/>
 <a href="http://mahua.jser.me/">http://mahua.jser.me/</a></li>
<li><p><strong><em>支持转义的字符</em></strong></p>

<pre><code>\   反斜线  
`   反引号  
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Octopress框架建博客]]></title>
    <link href="http://hbfBlog.github.io/blog/2014/04/05/how-to-using-octopress/"/>
    <updated>2014-04-05T12:12:02+08:00</updated>
    <id>http://hbfBlog.github.io/blog/2014/04/05/how-to-using-octopress</id>
    <content type="html"><![CDATA[<p>记录自己操作Octopress建博客的过程以及碰到的问题。</p>

<!--more-->


<p></p>

<h4>第一步：安装Octopress的环境：</h4>

<p>  1.检查Ruby版本(>=1.9.3):</p>

<pre><code>ruby -v =&gt;ruby 2.0.0p247  
</code></pre>

<p>  2.克隆一个Octopress仓库到本地：</p>

<pre><code>git clone https://github.com/BaifanHe/octopress.git octopress 
cd octopress 
</code></pre>

<p>  3.安装依赖项</p>

<pre><code>gem install bundler 
bundle install 
rake install
</code></pre>

<h4>第二步：部署到Github Pages：</h4>

<p>  1.在Github上创建一个<code>hbfBlog</code>小组。<br/>
  2.在该小组中创建一个仓库（命名与组名一致）：<code>hbfBlog.github.io</code><br/>
  3.运行命令<code>rake setup_github_pages</code>:</p>

<pre><code>由于已经安装有最新版的bundler，用该命令无法直接使用Octopress框架依赖的低版本，使用如下格式：
`bundle exec rake setup_github_pages`  
</code></pre>

<p>  4.命令提示请输入Github仓库地址的时候，输入：</p>

<pre><code>https://github.com/hbfBlog/hbfBlog.github.io.git 
</code></pre>

<p>  5.生成博客页面框架：<code>rake generate</code>生成博客页面存放在<code>public</code>目录下。 <br/>
  6.部署博客页面框架：<code>rake deploy</code>将<code>public</code>目录中的内容存放入<code>_deploy</code>目录中。</p>

<h4>第三步：同步到Github:</h4>

<pre><code>git add .  
git commit -am "create myself blog"   
git push origin source  
</code></pre>

<h4>第四步：新建博客:</h4>

<pre><code>rake new_post["how to using octoprocess"]  
=&gt; zsh: no matches found: new_post[how to using octopress]  
</code></pre>

<p>  由于使用的是<code>zsh shell</code>，因此运行命令的时候需要做反义字符处理:</p>

<pre><code>rake new_post\["how to using octoprocess"\] 
=&gt;Creating new page: source/_post/2014-04-05-how-to-using-octopress.markdown  
</code></pre>

<p>  编辑markdown文件，创作文章。</p>

<h4>第五步：新建关于页面:</h4>

<pre><code>bundle exec rake new_page\["about"\]                
mkdir -p source/about  
Creating new page: source/about/index.markdown  
</code></pre>

<p>  添加关于链接：</p>

<pre><code>在source\_includes\custom\navigation.html中添加以下内容:
&lt;li&gt;&lt;a href="http://hbfBlog.github.io/about"&gt;About&lt;/a&gt;&lt;/li&gt;
</code></pre>

<h4>第六步：查看变更和预览:</h4>

<pre><code>bundle exec rake generate  
bundle exec rake watch  
bundle exec rake preview  
</code></pre>

<p>  使用浏览器查看：<code>http://localhost:4000</code>，即可进行预览。</p>

<h4>第七步: 实施博客:</h4>

<pre><code>bundle exec rake deploy
</code></pre>

<h4>第八步: 提交到Github:</h4>

<pre><code>git add .  
git status  
git commit -am "create a new post and about page"  
git push origin source  
</code></pre>

<h4>第九步：访问</h4>

<p>  <a href="http://hbfblog.github.io">http://hbfblog.github.io</a></p>
]]></content>
  </entry>
  
</feed>
